"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
const wrap_request_1 = require("../../../utils/wrap_request");
class KibanaDatabaseAdapter {
    constructor(kbnElasticSearch) {
        this.es = kbnElasticSearch.getCluster('admin');
    }
    async putTemplate(user, params) {
        const callES = this.getCallType(user);
        const result = await callES('indices.putTemplate', params);
        return result;
    }
    async get(user, params) {
        const callES = this.getCallType(user);
        const result = await callES('get', params);
        return result;
        // todo
    }
    async mget(user, params) {
        const callES = this.getCallType(user);
        const result = await callES('mget', params);
        return result;
        // todo
    }
    async bulk(user, params) {
        const callES = this.getCallType(user);
        const result = await callES('bulk', params);
        return result;
    }
    async create(user, params) {
        const callES = this.getCallType(user);
        const result = await callES('create', params);
        return result;
    }
    async index(user, params) {
        const callES = this.getCallType(user);
        const result = await callES('index', params);
        return result;
    }
    async delete(user, params) {
        const callES = this.getCallType(user);
        const result = await callES('delete', params);
        return result;
    }
    async search(user, params) {
        const callES = this.getCallType(user);
        const result = await callES('search', params);
        return result;
    }
    getCallType(user) {
        if (user.kind === 'authenticated') {
            return this.es.callWithRequest.bind(null, {
                headers: user[wrap_request_1.internalAuthData],
            });
        }
        else if (user.kind === 'internal') {
            return this.es.callWithInternalUser;
        }
        else {
            throw new Error('Invalid user type');
        }
    }
}
exports.KibanaDatabaseAdapter = KibanaDatabaseAdapter;
