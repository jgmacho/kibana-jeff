"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const wrap_request_1 = require("../../../utils/wrap_request");
class HapiBackendFrameworkAdapter {
    constructor(settings = {
        encryptionKey: 'something_who_cares',
        enrollmentTokensTtlInSeconds: 10 * 60,
    }, hapiServer) {
        this.internalUser = {
            kind: 'internal',
        };
        this.server = hapiServer;
        this.settings = settings;
        this.version = 'testing';
    }
    getSetting(settingPath) {
        switch (settingPath) {
            case 'xpack.beats.enrollmentTokensTtlInSeconds':
                return this.settings.enrollmentTokensTtlInSeconds;
            case 'xpack.beats.encryptionKey':
                return this.settings.encryptionKey;
        }
    }
    exposeStaticDir(urlPath, dir) {
        if (!this.server) {
            throw new Error('Must pass a hapi server into the adapter to use exposeStaticDir');
        }
        this.server.route({
            handler: {
                directory: {
                    path: dir,
                },
            },
            method: 'GET',
            path: urlPath,
        });
    }
    registerRoute(route) {
        if (!this.server) {
            throw new Error('Must pass a hapi server into the adapter to use registerRoute');
        }
        const wrappedHandler = (licenseRequired) => (request, reply) => {
            return route.handler(wrap_request_1.wrapRequest(request), reply);
        };
        this.server.route({
            handler: wrappedHandler(route.licenseRequired || false),
            method: route.method,
            path: route.path,
            config: {
                ...route.config,
                auth: false,
            },
        });
    }
    async injectRequstForTesting({ method, url, headers, payload }) {
        return await this.server.inject({ method, url, headers, payload });
    }
}
exports.HapiBackendFrameworkAdapter = HapiBackendFrameworkAdapter;
