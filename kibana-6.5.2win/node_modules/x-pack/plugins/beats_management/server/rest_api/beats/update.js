"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const joi_1 = tslib_1.__importDefault(require("joi"));
const error_wrappers_1 = require("../../utils/error_wrappers");
// TODO: write to Kibana audit log file (include who did the verification as well)
exports.createBeatUpdateRoute = (libs) => ({
    method: 'PUT',
    path: '/api/beats/agent/{beatId}',
    licenseRequired: true,
    requiredRoles: ['beats_admin'],
    config: {
        validate: {
            headers: joi_1.default.object({
                'kbn-beats-access-token': joi_1.default.string(),
            }).options({
                allowUnknown: true,
            }),
            params: joi_1.default.object({
                beatId: joi_1.default.string(),
            }),
            payload: joi_1.default.object({
                active: joi_1.default.bool(),
                ephemeral_id: joi_1.default.string(),
                host_name: joi_1.default.string(),
                local_configuration_yml: joi_1.default.string(),
                metadata: joi_1.default.object(),
                name: joi_1.default.string(),
                type: joi_1.default.string(),
                version: joi_1.default.string(),
            }),
        },
    },
    handler: async (request, reply) => {
        const { beatId } = request.params;
        const accessToken = request.headers['kbn-beats-access-token'];
        const remoteAddress = request.info.remoteAddress;
        const userOrToken = accessToken || request.user;
        if (request.user.kind === 'unauthenticated' && request.payload.active !== undefined) {
            return reply({ message: 'access-token is not a valid auth type to change beat status' }).code(401);
        }
        try {
            const status = await libs.beats.update(userOrToken, beatId, {
                ...request.payload,
                host_ip: remoteAddress,
            });
            switch (status) {
                case 'beat-not-found':
                    return reply({ message: 'Beat not found', success: false }).code(404);
                case 'invalid-access-token':
                    return reply({ message: 'Invalid access token', success: false }).code(401);
            }
            reply({ success: true }).code(204);
        }
        catch (err) {
            return reply(error_wrappers_1.wrapEsError(err));
        }
    },
});
