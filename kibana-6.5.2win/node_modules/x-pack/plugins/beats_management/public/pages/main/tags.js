"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eui_1 = require("@elastic/eui");
const react_1 = tslib_1.__importDefault(require("react"));
const table_1 = require("../../components/table");
const assignment_schema_1 = require("../../components/table/assignment_schema");
const with_kuery_autocompletion_1 = require("../../containers/with_kuery_autocompletion");
class TagsPage extends react_1.default.PureComponent {
    constructor(props) {
        super(props);
        this.handleTagsAction = async (action, payload) => {
            switch (action) {
                case table_1.AssignmentActionType.Delete:
                    const tags = this.getSelectedTags().map((tag) => tag.id);
                    const success = await this.props.libs.tags.delete(tags);
                    if (!success) {
                        alert('Some of these tags might be assigned to beats. Please ensure tags being removed are not activly assigned');
                    }
                    else {
                        this.loadTags();
                        if (this.state.tableRef && this.state.tableRef.current) {
                            this.state.tableRef.current.resetSelection();
                        }
                    }
                    break;
            }
            this.loadTags();
        };
        this.getSelectedTags = () => {
            return this.state.tableRef.current ? this.state.tableRef.current.state.selection : [];
        };
        this.state = {
            tags: [],
            tableRef: react_1.default.createRef(),
        };
        this.loadTags();
    }
    render() {
        return (react_1.default.createElement(with_kuery_autocompletion_1.WithKueryAutocompletion, { libs: this.props.libs, fieldPrefix: "tag" }, autocompleteProps => (react_1.default.createElement(table_1.Table, { kueryBarProps: {
                ...autocompleteProps,
                filterQueryDraft: 'false',
                isValid: this.props.libs.elasticsearch.isKueryValid(this.props.urlState.tagsKBar || ''),
                onChange: (value) => this.props.setUrlState({ tagsKBar: value }),
                onSubmit: () => null,
                value: this.props.urlState.tagsKBar || '',
            }, assignmentOptions: {
                schema: assignment_schema_1.tagListAssignmentOptions,
                type: 'primary',
                items: [],
                actionHandler: this.handleTagsAction,
            }, ref: this.state.tableRef, items: this.state.tags, type: table_1.TagsTableType }))));
    }
    async loadTags() {
        const tags = await this.props.libs.tags.getAll();
        this.setState({
            tags,
        });
    }
}
TagsPage.ActionArea = ({ goTo }) => (react_1.default.createElement(eui_1.EuiButton, { size: "s", color: "primary", onClick: async () => {
        goTo('/tag/create');
    } }, "Add Tag"));
exports.TagsPage = TagsPage;
