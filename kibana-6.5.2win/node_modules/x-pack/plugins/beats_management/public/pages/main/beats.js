"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eui_1 = require("@elastic/eui");
const lodash_1 = require("lodash");
const moment_1 = tslib_1.__importDefault(require("moment"));
const react_1 = tslib_1.__importDefault(require("react"));
const constants_1 = require("x-pack/plugins/beats_management/common/constants");
const table_1 = require("../../components/table");
const assignment_schema_1 = require("../../components/table/assignment_schema");
const table_2 = require("../../components/table/table");
const with_kuery_autocompletion_1 = require("../../containers/with_kuery_autocompletion");
const enroll_fragment_1 = require("./enroll_fragment");
class BeatsPage extends react_1.default.PureComponent {
    constructor(props) {
        super(props);
        this.handleBeatsActions = (action, payload) => {
            switch (action) {
                case table_2.AssignmentActionType.Assign:
                    this.handleBeatTagAssignment(payload);
                    break;
                case table_2.AssignmentActionType.Edit:
                    // TODO: navigate to edit page
                    break;
                case table_2.AssignmentActionType.Delete:
                    this.deleteSelected();
                    break;
                case table_2.AssignmentActionType.Reload:
                    this.loadTags();
                    break;
            }
            this.props.loadBeats();
        };
        this.handleBeatTagAssignment = async (tagId) => {
            const selected = this.getSelectedBeats();
            if (selected.some(beat => beat.full_tags.some(({ id }) => id === tagId))) {
                await this.removeTagsFromBeats(selected, tagId);
            }
            else {
                await this.assignTagsToBeats(selected, tagId);
            }
        };
        this.deleteSelected = async () => {
            const selected = this.getSelectedBeats();
            for (const beat of selected) {
                await this.props.libs.beats.update(beat.id, { active: false });
            }
            this.notifyBeatDisenrolled(selected);
            // because the compile code above has a very minor race condition, we wait,
            // the max race condition time is really 10ms but doing 100 to be safe
            setTimeout(async () => {
                await this.props.loadBeats();
            }, 100);
        };
        this.loadTags = async () => {
            const tags = await this.props.libs.tags.getAll();
            this.setState({
                tags,
            });
        };
        this.createBeatTagAssignments = (beats, tagId) => beats.map(({ id }) => ({ beatId: id, tag: tagId }));
        this.removeTagsFromBeats = async (beats, tagId) => {
            if (beats.length) {
                const assignments = this.createBeatTagAssignments(beats, tagId);
                await this.props.libs.beats.removeTagsFromBeats(assignments);
                await this.refreshData();
                this.notifyUpdatedTagAssociation('remove', assignments, tagId);
            }
        };
        this.assignTagsToBeats = async (beats, tagId) => {
            if (beats.length) {
                const assignments = this.createBeatTagAssignments(beats, tagId);
                await this.props.libs.beats.assignTagsToBeats(assignments);
                await this.refreshData();
                this.notifyUpdatedTagAssociation('add', assignments, tagId);
            }
        };
        this.notifyBeatDisenrolled = async (beats) => {
            let title;
            let text;
            if (beats.length === 1) {
                title = `"${beats[0].name || beats[0].id}" disenrolled`;
                text = `Beat with ID "${beats[0].id}" was disenrolled.`;
            }
            else {
                title = `${beats.length} beats disenrolled`;
            }
            this.setState({
                notifications: this.state.notifications.concat({
                    color: 'warning',
                    id: `disenroll_${new Date()}`,
                    title,
                    text,
                }),
            });
        };
        this.notifyUpdatedTagAssociation = (action, assignments, tag) => {
            const actionName = action === 'remove' ? 'Removed' : 'Added';
            const preposition = action === 'remove' ? 'from' : 'to';
            const beatMessage = assignments.length && assignments.length === 1
                ? `beat "${this.getNameForBeatId(assignments[0].beatId)}"`
                : `${assignments.length} beats`;
            this.setState({
                notifications: this.state.notifications.concat({
                    color: 'success',
                    id: `tag-${moment_1.default.now()}`,
                    text: react_1.default.createElement("p", null, `${actionName} tag "${tag}" ${preposition} ${beatMessage}.`),
                    title: `Tag ${actionName}`,
                }),
            });
        };
        this.getNameForBeatId = (beatId) => {
            const beat = this.props.beats.find(b => b.id === beatId);
            if (beat) {
                return beat.name;
            }
            return null;
        };
        this.refreshData = async () => {
            await this.loadTags();
            await this.props.loadBeats();
            this.state.tableRef.current.setSelection(this.getSelectedBeats());
        };
        this.getSelectedBeats = () => {
            const selectedIds = this.state.tableRef.current.state.selection.map((beat) => beat.id);
            const beats = [];
            selectedIds.forEach((id) => {
                const beat = this.props.beats.find(b => b.id === id);
                if (beat) {
                    beats.push(beat);
                }
            });
            return beats;
        };
        this.filterSelectedBeatTags = () => {
            if (!this.state.tags) {
                return [];
            }
            return this.selectedBeatConfigsRequireUniqueness()
                ? this.state.tags.map(this.disableTagForUniquenessEnforcement)
                : this.state.tags;
        };
        this.configBlocksRequireUniqueness = (configurationBlocks) => lodash_1.intersection(constants_1.UNIQUENESS_ENFORCING_TYPES, configurationBlocks.map(block => block.type))
            .length !== 0;
        this.disableTagForUniquenessEnforcement = (tag) => this.configBlocksRequireUniqueness(tag.configuration_blocks) &&
            // if > 0 beats are associated with the tag, it will result in disassociation, so do not disable it
            !this.getSelectedBeats().some(beat => beat.full_tags.some(({ id }) => id === tag.id))
            ? { ...tag, disabled: true }
            : tag;
        this.selectedBeatConfigsRequireUniqueness = () => 
        // union beat tags
        lodash_1.flatten(this.getSelectedBeats().map(({ full_tags }) => full_tags))
            // map tag list to bool
            .map(({ configuration_blocks }) => this.configBlocksRequireUniqueness(configuration_blocks))
            // reduce to result
            .reduce((acc, cur) => acc || cur, false);
        this.state = {
            notifications: [],
            tableRef: react_1.default.createRef(),
            tags: null,
        };
    }
    componentDidUpdate(prevProps) {
        if (this.props.location !== prevProps.location) {
            this.props.loadBeats();
        }
    }
    render() {
        return (react_1.default.createElement("div", null,
            react_1.default.createElement(with_kuery_autocompletion_1.WithKueryAutocompletion, { libs: this.props.libs, fieldPrefix: "beat" }, autocompleteProps => (react_1.default.createElement(table_1.Table, { kueryBarProps: {
                    ...autocompleteProps,
                    filterQueryDraft: 'false',
                    isValid: this.props.libs.elasticsearch.isKueryValid(this.props.urlState.beatsKBar || ''),
                    onChange: (value) => this.props.setUrlState({ beatsKBar: value }),
                    onSubmit: () => null,
                    value: this.props.urlState.beatsKBar || '',
                }, assignmentOptions: {
                    items: this.filterSelectedBeatTags(),
                    schema: assignment_schema_1.beatsListAssignmentOptions,
                    type: 'assignment',
                    actionHandler: this.handleBeatsActions,
                }, items: lodash_1.sortBy(this.props.beats, 'id') || [], ref: this.state.tableRef, type: table_1.BeatsTableType }))),
            react_1.default.createElement(eui_1.EuiGlobalToastList, { toasts: this.state.notifications, dismissToast: () => this.setState({ notifications: [] }), toastLifeTimeMs: 5000 })));
    }
}
BeatsPage.ActionArea = (props) => (react_1.default.createElement(react_1.default.Fragment, null,
    react_1.default.createElement(eui_1.EuiButtonEmpty, { onClick: () => {
            // random, but specific number ensures new tab does not overwrite another _newtab in chrome
            // and at the same time not truly random so that many clicks of the link open many tabs at this same URL
            window.open('https://www.elastic.co/guide/en/beats/libbeat/current/getting-started.html', '_newtab35628937456');
        } }, "Learn how to install beats"),
    react_1.default.createElement(eui_1.EuiButton, { size: "s", color: "primary", onClick: async () => {
            props.goTo(`/overview/beats/enroll`);
        } }, "Enroll Beats"),
    props.location.pathname === '/overview/beats/enroll' && (react_1.default.createElement(eui_1.EuiOverlayMask, null,
        react_1.default.createElement(eui_1.EuiModal, { onClose: () => {
                props.goTo(`/overview/beats`);
            }, style: { width: '640px' } },
            react_1.default.createElement(eui_1.EuiModalHeader, null,
                react_1.default.createElement(eui_1.EuiModalHeaderTitle, null, "Enroll a new Beat")),
            react_1.default.createElement(eui_1.EuiModalBody, null,
                react_1.default.createElement(enroll_fragment_1.EnrollBeatPage, Object.assign({}, props))))))));
exports.BeatsPage = BeatsPage;
