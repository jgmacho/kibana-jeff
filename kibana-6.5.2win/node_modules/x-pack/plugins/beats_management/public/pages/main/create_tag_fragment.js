"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eui_1 = require("@elastic/eui");
require("brace/mode/yaml");
require("brace/theme/github");
const react_1 = tslib_1.__importDefault(require("react"));
const tag_1 = require("../../components/tag");
const with_url_state_1 = require("../../containers/with_url_state");
class CreateTagFragment extends react_1.default.PureComponent {
    constructor(props) {
        super(props);
        this.mode = 'create';
        this.loadTag = async () => {
            const tags = await this.props.libs.tags.getTagsWithIds([this.state.tag.id]);
            if (tags.length > 0) {
                this.setState({
                    tag: tags[0],
                });
            }
        };
        this.saveTag = async () => {
            const newTag = await this.props.libs.tags.upsertTag(this.state.tag);
            if (!newTag) {
                return alert('error saving tag');
            }
            this.props.setUrlState({
                createdTag: newTag.id,
            });
            this.props.goTo(`/overview/initial/finish`);
        };
        this.state = {
            showFlyout: false,
            tag: {
                id: props.urlState.createdTag ? props.urlState.createdTag : '',
                color: '#DD0A73',
                configuration_blocks: [],
                last_updated: new Date(),
            },
        };
        if (props.urlState.createdTag) {
            this.mode = 'edit';
            this.loadTag();
        }
    }
    render() {
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(tag_1.TagEdit, { tag: this.state.tag, mode: this.mode, onDetachBeat: (beatIds) => {
                    this.props.libs.beats.removeTagsFromBeats(beatIds.map(id => {
                        return { beatId: id, tag: this.state.tag.id };
                    }));
                }, onTagChange: (field, value) => this.setState(oldState => ({
                    tag: { ...oldState.tag, [field]: value },
                })), attachedBeats: null }),
            react_1.default.createElement(eui_1.EuiSpacer, null),
            react_1.default.createElement(eui_1.EuiHorizontalRule, null),
            react_1.default.createElement(eui_1.EuiFlexGroup, null,
                react_1.default.createElement(eui_1.EuiFlexItem, { grow: false },
                    react_1.default.createElement(eui_1.EuiButton, { fill: true, disabled: this.state.tag.id.search(/^[a-zA-Z0-9-]+$/) === -1 ||
                            this.state.tag.id === '' ||
                            this.state.tag.configuration_blocks.length === 0, onClick: this.saveTag }, "Save & Continue")))));
    }
}
exports.CreateTagFragment = CreateTagFragment;
exports.CreateTagPageFragment = with_url_state_1.withUrlState(CreateTagFragment);
