"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
const eui_1 = require("@elastic/eui");
const lodash_1 = require("lodash");
const react_1 = tslib_1.__importDefault(require("react"));
const with_url_state_1 = require("../../containers/with_url_state");
class EnrollBeat extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.pinging = false;
        this.pingForBeatWithToken = async (libs, token) => {
            try {
                const beats = await libs.beats.getBeatWithToken(token);
                if (!beats) {
                    throw new Error('no beats');
                }
                return beats;
            }
            catch (err) {
                if (this.pinging) {
                    const timeout = (ms) => new Promise(res => setTimeout(res, ms));
                    await timeout(5000);
                    return await this.pingForBeatWithToken(libs, token);
                }
            }
        };
        this.waitForToken = async (token) => {
            if (this.pinging) {
                return;
            }
            this.pinging = true;
            const enrolledBeat = (await this.pingForBeatWithToken(this.props.libs, token));
            this.setState({
                enrolledBeat,
            });
            this.pinging = false;
        };
        this.state = {
            enrolledBeat: null,
            command: 'sudo filebeat',
            beatType: 'filebeat',
        };
    }
    async componentDidMount() {
        if (!this.props.urlState.enrollmentToken) {
            const enrollmentToken = await this.props.libs.tokens.createEnrollmentToken();
            this.props.setUrlState({
                enrollmentToken,
            });
        }
    }
    render() {
        if (!this.props.urlState.enrollmentToken) {
            return null;
        }
        if (this.props.urlState.enrollmentToken && !this.state.enrolledBeat) {
            this.waitForToken(this.props.urlState.enrollmentToken);
        }
        const { goTo } = this.props;
        const actions = [];
        switch (this.props.location.pathname) {
            case '/overview/initial/beats':
                actions.push({
                    goTo: '/overview/initial/tag',
                    name: 'Continue',
                });
                break;
            case '/overview/beats/enroll':
                actions.push({
                    goTo: '/overview/beats/enroll',
                    name: 'Enroll another Beat',
                    newToken: true,
                });
                actions.push({
                    goTo: '/overview/beats',
                    name: 'Done',
                    clearToken: true,
                });
                break;
        }
        return (react_1.default.createElement(react_1.default.Fragment, null,
            !this.state.enrolledBeat && (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(eui_1.EuiFlexGroup, null,
                    react_1.default.createElement(eui_1.EuiFlexItem, null,
                        react_1.default.createElement(eui_1.EuiFlexGroup, { gutterSize: "s", alignItems: "center" },
                            react_1.default.createElement(eui_1.EuiFlexItem, { grow: false },
                                react_1.default.createElement(eui_1.EuiTitle, { size: "xs" },
                                    react_1.default.createElement("h3", null, "Beat type:")))),
                        react_1.default.createElement(eui_1.EuiSelect, { value: this.state.beatType, options: [
                                { value: 'filebeat', text: 'Filebeat' },
                                { value: 'metricbeat', text: 'Metricbeat' },
                            ], onChange: (e) => this.setState({ beatType: e.target.value }), fullWidth: true }))),
                react_1.default.createElement("br", null),
                react_1.default.createElement("br", null),
                react_1.default.createElement(eui_1.EuiFlexGroup, null,
                    react_1.default.createElement(eui_1.EuiFlexItem, null,
                        react_1.default.createElement(eui_1.EuiFlexGroup, { gutterSize: "s", alignItems: "center" },
                            react_1.default.createElement(eui_1.EuiFlexItem, { grow: false },
                                react_1.default.createElement(eui_1.EuiTitle, { size: "xs" },
                                    react_1.default.createElement("h3", null, "Platform:")))),
                        react_1.default.createElement(eui_1.EuiSelect, { value: this.state.command, options: [
                                {
                                    value: `sudo ${this.state.beatType}`,
                                    text: 'DEB / RPM',
                                },
                                {
                                    value: `PS C:\\Program Files\\${lodash_1.capitalize(this.state.beatType)}> ${this.state.beatType}.exe`,
                                    text: 'Windows',
                                },
                                {
                                    value: `./${this.state.beatType}`,
                                    text: 'MacOS',
                                },
                            ], onChange: (e) => this.setState({ command: e.target.value }), fullWidth: true }))),
                react_1.default.createElement("br", null),
                react_1.default.createElement("br", null),
                this.state.command && (react_1.default.createElement(eui_1.EuiFlexGroup, null,
                    react_1.default.createElement(eui_1.EuiFlexItem, null,
                        react_1.default.createElement(eui_1.EuiFlexGroup, { gutterSize: "s", alignItems: "center" },
                            react_1.default.createElement(eui_1.EuiFlexItem, { grow: false },
                                react_1.default.createElement(eui_1.EuiTitle, { size: "xs" },
                                    react_1.default.createElement("h3", null,
                                        "On the host where your ",
                                        lodash_1.capitalize(this.state.beatType),
                                        " is installed, run:")))),
                        react_1.default.createElement("div", { className: "euiFormControlLayout euiFormControlLayout--fullWidth" },
                            react_1.default.createElement("div", { className: "euiFieldText euiFieldText--fullWidth", style: { textAlign: 'left' } },
                                "$ ",
                                this.state.command,
                                " enroll ",
                                window.location.protocol,
                                `//`,
                                window.location.host,
                                this.props.libs.framework.baseURLPath
                                    ? this.props.libs.framework.baseURLPath
                                    : '',
                                ' ',
                                this.props.urlState.enrollmentToken)),
                        react_1.default.createElement("br", null),
                        react_1.default.createElement("br", null),
                        react_1.default.createElement(eui_1.EuiFlexGroup, null,
                            react_1.default.createElement(eui_1.EuiFlexItem, null,
                                react_1.default.createElement(eui_1.EuiFlexGroup, { gutterSize: "s", alignItems: "center" },
                                    react_1.default.createElement(eui_1.EuiFlexItem, { grow: false },
                                        react_1.default.createElement(eui_1.EuiTitle, { size: "xs" },
                                            react_1.default.createElement("h3", null,
                                                "Waiting for ",
                                                lodash_1.capitalize(this.state.beatType),
                                                " to enroll...")))))),
                        react_1.default.createElement("br", null),
                        react_1.default.createElement(eui_1.EuiLoadingSpinner, { size: "l" })))))),
            this.state.enrolledBeat && (react_1.default.createElement(eui_1.EuiModalBody, null,
                "The Beat is now enrolled in central management:",
                react_1.default.createElement("br", null),
                react_1.default.createElement("br", null),
                react_1.default.createElement("br", null),
                react_1.default.createElement(eui_1.EuiBasicTable, { items: [this.state.enrolledBeat], columns: [
                        {
                            field: 'type',
                            name: 'Beat Type',
                            sortable: false,
                        },
                        {
                            field: 'version',
                            name: 'Version',
                            sortable: false,
                        },
                        {
                            field: 'host_name',
                            name: 'Hostname',
                            sortable: false,
                        },
                    ] }),
                react_1.default.createElement("br", null),
                react_1.default.createElement("br", null),
                actions.map(action => (react_1.default.createElement(eui_1.EuiButton, { key: action.name, size: "s", color: "primary", style: { marginLeft: 10 }, onClick: async () => {
                        if (action.clearToken) {
                            this.props.setUrlState({ enrollmentToken: '' });
                        }
                        if (action.newToken) {
                            const enrollmentToken = await this.props.libs.tokens.createEnrollmentToken();
                            this.props.setUrlState({ enrollmentToken });
                            return this.setState({
                                enrolledBeat: null,
                            });
                        }
                        goTo(action.goTo);
                    } }, action.name)))))));
    }
}
exports.EnrollBeat = EnrollBeat;
exports.EnrollBeatPage = with_url_state_1.withUrlState(EnrollBeat);
