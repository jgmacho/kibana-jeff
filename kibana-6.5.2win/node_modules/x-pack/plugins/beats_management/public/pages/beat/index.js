"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eui_1 = require("@elastic/eui");
const react_1 = tslib_1.__importDefault(require("react"));
const react_router_dom_1 = require("react-router-dom");
const primary_1 = require("../../components/layouts/primary");
const with_url_state_1 = require("../../containers/with_url_state");
const action_section_1 = require("./action_section");
const activity_1 = require("./activity");
const detail_1 = require("./detail");
const tags_1 = require("./tags");
class BeatDetailsPageComponent extends react_1.default.PureComponent {
    constructor(props) {
        super(props);
        this.onSelectedTabChanged = (id) => {
            this.props.history.push({
                pathname: id,
                search: this.props.location.search,
            });
        };
        this.state = {
            beat: undefined,
            beatId: this.props.match.params.beatId,
            isLoading: true,
        };
        this.loadBeat();
    }
    render() {
        const { beat } = this.state;
        let id;
        let name;
        if (beat) {
            id = beat.id;
            name = beat.name;
        }
        const title = this.state.isLoading
            ? 'Loading'
            : `Beat: ${name || 'No name receved from beat'} (id: ${id})`;
        const tabs = [
            {
                id: `/beat/${id}`,
                name: 'Config',
                disabled: false,
            },
            // {
            //   id: `/beat/${id}/activity`,
            //   name: 'Beat Activity',
            //   disabled: false,
            // },
            {
                id: `/beat/${id}/tags`,
                name: 'Configuration Tags',
                disabled: false,
            },
        ];
        return (react_1.default.createElement(primary_1.PrimaryLayout, { title: title, actionSection: react_1.default.createElement(action_section_1.BeatDetailsActionSection, { beat: beat }) },
            react_1.default.createElement(eui_1.EuiTabs, null, tabs.map((tab, index) => (react_1.default.createElement(eui_1.EuiTab, { disabled: tab.disabled, key: index, isSelected: tab.id === this.props.history.location.pathname, onClick: () => {
                    this.props.history.push({
                        pathname: tab.id,
                        search: this.props.location.search,
                    });
                } }, tab.name)))),
            react_1.default.createElement(eui_1.EuiSpacer, { size: "l" }),
            react_1.default.createElement(react_router_dom_1.Switch, null,
                react_1.default.createElement(react_router_dom_1.Route, { path: "/beat/:beatId/activity", render: (props) => react_1.default.createElement(activity_1.BeatActivityPage, Object.assign({ libs: this.props.libs }, props)) }),
                react_1.default.createElement(react_router_dom_1.Route, { path: "/beat/:beatId/tags", render: (props) => (react_1.default.createElement(tags_1.BeatTagsPage, Object.assign({ beatId: this.state.beatId, libs: this.props.libs, refreshBeat: () => this.loadBeat() }, props))) }),
                react_1.default.createElement(react_router_dom_1.Route, { path: "/beat/:beatId", render: (props) => (react_1.default.createElement(detail_1.BeatDetailPage, Object.assign({ beat: this.state.beat, libs: this.props.libs }, props))) }))));
    }
    async loadBeat() {
        const { beatId } = this.props.match.params;
        let beat;
        try {
            beat = await this.props.libs.beats.get(beatId);
            if (!beat) {
                throw new Error('beat not found');
            }
        }
        catch (e) {
            throw new Error(e);
        }
        this.setState({ beat, isLoading: false });
    }
}
exports.BeatDetailsPage = with_url_state_1.withUrlState(BeatDetailsPageComponent);
