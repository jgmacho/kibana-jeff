"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eui_1 = require("@elastic/eui");
const eui_2 = require("@elastic/eui");
const lodash_1 = require("lodash");
const react_1 = tslib_1.__importDefault(require("react"));
const table_1 = require("../table");
const action_control_1 = require("./action_control");
const tag_badge_list_1 = require("./tag_badge_list");
const FixedEuiToolTip = eui_1.EuiToolTip;
class OptionControl extends react_1.default.PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            showPopover: false,
        };
    }
    schemaToPanelTree(schemaOrArray, panels = []) {
        const { items, actionHandler } = this.props;
        let schema = null;
        let schemaArray = null;
        if (lodash_1.isArray(schemaOrArray)) {
            schemaArray = schemaOrArray;
        }
        else {
            schema = schemaOrArray;
        }
        const panel = {
            title: schema ? schema.name : undefined,
            id: panels.length,
        };
        if (schemaArray) {
            panel.items = schemaArray.map(def => {
                return {
                    onClick: def.lazyLoad ? () => actionHandler(table_1.AssignmentActionType.Reload) : undefined,
                    panel: def.panel ? def.panel.id : undefined,
                    name: def.action ? (react_1.default.createElement(action_control_1.ActionControl, { actionHandler: actionHandler, action: def.action, danger: def.danger, name: def.name, showWarning: def.showWarning, warningHeading: def.warningHeading, warningMessage: def.warningMessage })) : (react_1.default.createElement(eui_1.EuiTextColor, { color: def.danger ? 'danger' : 'default' }, def.name)),
                };
            });
        }
        else {
            if (items === undefined) {
                panel.content = 'Unknown Error.';
            }
            else if (items.length === 0) {
                panel.content = (react_1.default.createElement(eui_1.EuiPanel, null,
                    react_1.default.createElement(eui_1.EuiCard, { icon: react_1.default.createElement(eui_2.EuiIcon, { size: "l", type: "bolt" }), title: "No tags found.", description: "Please create a new configuration tag." })));
            }
            else {
                panel.content = react_1.default.createElement(tag_badge_list_1.TagBadgeList, { items: items, actionHandler: actionHandler });
            }
        }
        panels.push(panel);
        if (schemaArray !== null) {
            schemaArray.forEach((item) => {
                if (item.panel) {
                    this.schemaToPanelTree(item.panel, panels);
                }
            });
        }
        return panels;
    }
    render() {
        const { itemType, selectionCount, schema } = this.props;
        return (react_1.default.createElement(eui_1.EuiPopover, { button: react_1.default.createElement(FixedEuiToolTip, { position: "top", delay: "long", content: selectionCount === 0
                    ? `Select ${itemType} to perform operations such as setting tags and unenrolling Beats.`
                    : `Manage your selected ${itemType}` },
                react_1.default.createElement(eui_1.EuiButton, { color: "primary", iconSide: "right", disabled: selectionCount === 0, iconType: "arrowDown", onClick: () => {
                        this.setState({
                            showPopover: true,
                        });
                    } },
                    "Manage ",
                    itemType)), closePopover: () => {
                this.setState({ showPopover: false });
            }, id: "assignmentList", isOpen: this.state.showPopover, panelPaddingSize: "none", anchorPosition: "downLeft", withTitle: true },
            react_1.default.createElement(eui_1.EuiContextMenu, { initialPanelId: 0, panels: this.schemaToPanelTree(schema) })));
    }
}
exports.OptionControl = OptionControl;
