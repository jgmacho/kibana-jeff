"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
const eui_1 = require("@elastic/eui");
const react_1 = tslib_1.__importStar(require("react"));
const constants_1 = require("../../../lib/constants");
class PrivilegeCalloutWarning extends react_1.Component {
    constructor() {
        super(...arguments);
        this.state = {
            showImpactedSpaces: false,
        };
    }
    render() {
        const { basePrivilege, isReservedRole } = this.props;
        let callout = null;
        if (basePrivilege === 'all') {
            if (isReservedRole) {
                callout = (react_1.default.createElement(eui_1.EuiCallOut, { color: "warning", iconType: "iInCircle", title: "Cannot customize a reserved role's space privileges" },
                    react_1.default.createElement("p", null, "This role always grants full access to all spaces. To customize privileges for individual spaces, you must create a new role.")));
            }
            else {
                callout = (react_1.default.createElement(eui_1.EuiCallOut, { color: "warning", iconType: "iInCircle", title: 'Minimum privilege is too high to customize individual spaces' },
                    react_1.default.createElement("p", null,
                        "Setting the minimum privilege to ",
                        react_1.default.createElement("strong", null, "all"),
                        " grants full access to all spaces. To customize privileges for individual spaces, the minimum privilege must be either ",
                        react_1.default.createElement("strong", null, "read"),
                        " or ",
                        react_1.default.createElement("strong", null, "none"),
                        ".")));
            }
        }
        if (basePrivilege === 'read') {
            if (isReservedRole) {
                callout = (react_1.default.createElement(eui_1.EuiCallOut, { color: "warning", iconType: "iInCircle", title: "Cannot customize a reserved role's space privileges" },
                    react_1.default.createElement("p", null, "This role always grants read access to all spaces. To customize privileges for individual spaces, you must create a new role.")));
            }
            else {
                callout = (react_1.default.createElement(eui_1.EuiCallOut, { color: "primary", iconType: "iInCircle", title: react_1.default.createElement("span", null,
                        "The minimal possible privilege is ",
                        react_1.default.createElement("strong", null, "read"),
                        ".") }));
            }
        }
        if (basePrivilege === constants_1.NO_PRIVILEGE_VALUE && isReservedRole) {
            callout = (react_1.default.createElement(eui_1.EuiCallOut, { color: "warning", iconType: "iInCircle", title: "Cannot customize a reserved role's space privileges" },
                react_1.default.createElement("p", null, "This role never grants access to any spaces within Kibana. To customize privileges for individual spaces, you must create a new role.")));
        }
        return callout;
    }
}
exports.PrivilegeCalloutWarning = PrivilegeCalloutWarning;
