"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eui_1 = require("@elastic/eui");
const react_1 = tslib_1.__importStar(require("react"));
// @ts-ignore
const documentation_links_1 = require("../../../../../../documentation_links");
const collapsible_panel_1 = require("../../collapsible_panel");
const cluster_privileges_1 = require("./cluster_privileges");
const index_privileges_1 = require("./index_privileges");
class ElasticsearchPrivileges extends react_1.Component {
    constructor() {
        super(...arguments);
        this.getForm = () => {
            const { role, httpClient, validator, onChange, indexPatterns, allowDocumentLevelSecurity, allowFieldLevelSecurity, } = this.props;
            const indexProps = {
                role,
                httpClient,
                validator,
                indexPatterns,
                allowDocumentLevelSecurity,
                allowFieldLevelSecurity,
                onChange,
            };
            return (react_1.default.createElement(react_1.Fragment, null,
                react_1.default.createElement(eui_1.EuiDescribedFormGroup, { title: react_1.default.createElement("h3", null, "Cluster privileges"), description: react_1.default.createElement("p", null,
                        "Manage the actions this role can perform against your cluster.",
                        ' ',
                        this.learnMore(documentation_links_1.documentationLinks.esClusterPrivileges)) },
                    react_1.default.createElement(eui_1.EuiFormRow, { fullWidth: true, hasEmptyLabelSpace: true },
                        react_1.default.createElement(cluster_privileges_1.ClusterPrivileges, { role: this.props.role, onChange: this.onClusterPrivilegesChange }))),
                react_1.default.createElement(eui_1.EuiSpacer, null),
                react_1.default.createElement(eui_1.EuiDescribedFormGroup, { title: react_1.default.createElement("h3", null, "Run As privileges"), description: react_1.default.createElement("p", null,
                        "Allow requests to be submitted on the behalf of other users.",
                        ' ',
                        this.learnMore(documentation_links_1.documentationLinks.esRunAsPrivileges)) },
                    react_1.default.createElement(eui_1.EuiFormRow, { hasEmptyLabelSpace: true },
                        react_1.default.createElement(eui_1.EuiComboBox, { placeholder: this.props.editable ? 'Add a user...' : undefined, options: this.props.runAsUsers.map(username => ({
                                id: username,
                                label: username,
                                isGroupLabelOption: false,
                            })), selectedOptions: this.props.role.elasticsearch.run_as.map(u => ({ label: u })), onChange: this.onRunAsUserChange, isDisabled: !this.props.editable }))),
                react_1.default.createElement(eui_1.EuiSpacer, null),
                react_1.default.createElement(eui_1.EuiTitle, { size: 'xs' },
                    react_1.default.createElement("h3", null, "Index privileges")),
                react_1.default.createElement(eui_1.EuiSpacer, { size: 's' }),
                react_1.default.createElement(eui_1.EuiText, { size: 's', color: 'subdued' },
                    react_1.default.createElement("p", null,
                        "Control access to the data in your cluster.",
                        ' ',
                        this.learnMore(documentation_links_1.documentationLinks.esIndicesPrivileges))),
                react_1.default.createElement(index_privileges_1.IndexPrivileges, Object.assign({}, indexProps)),
                react_1.default.createElement(eui_1.EuiHorizontalRule, null),
                this.props.editable && (react_1.default.createElement(eui_1.EuiButton, { size: 's', iconType: 'plusInCircle', onClick: this.addIndexPrivilege }, "Add index privilege"))));
        };
        this.learnMore = (href) => (react_1.default.createElement(eui_1.EuiLink, { className: "editRole__learnMore", href: href, target: '_blank' }, "Learn more"));
        this.addIndexPrivilege = () => {
            const { role } = this.props;
            const newIndices = [
                ...role.elasticsearch.indices,
                {
                    names: [],
                    privileges: [],
                    field_security: {
                        grant: ['*'],
                    },
                },
            ];
            this.props.onChange({
                ...this.props.role,
                elasticsearch: {
                    ...this.props.role.elasticsearch,
                    indices: newIndices,
                },
            });
        };
        this.onClusterPrivilegesChange = (cluster) => {
            const role = {
                ...this.props.role,
                elasticsearch: {
                    ...this.props.role.elasticsearch,
                    cluster,
                },
            };
            this.props.onChange(role);
        };
        this.onRunAsUserChange = (users) => {
            const role = {
                ...this.props.role,
                elasticsearch: {
                    ...this.props.role.elasticsearch,
                    run_as: users.map((u) => u.label),
                },
            };
            this.props.onChange(role);
        };
    }
    render() {
        return (react_1.default.createElement(collapsible_panel_1.CollapsiblePanel, { iconType: 'logoElasticsearch', title: 'Elasticsearch' }, this.getForm()));
    }
}
exports.ElasticsearchPrivileges = ElasticsearchPrivileges;
