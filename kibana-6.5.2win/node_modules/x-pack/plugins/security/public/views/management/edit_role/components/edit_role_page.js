"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
const eui_1 = require("@elastic/eui");
const lodash_1 = require("lodash");
const react_1 = tslib_1.__importStar(require("react"));
const notify_1 = require("ui/notify");
const role_1 = require("../../../../lib/role");
const objects_1 = require("../../../../objects");
const management_urls_1 = require("../../management_urls");
const validate_role_1 = require("../lib/validate_role");
const delete_role_button_1 = require("./delete_role_button");
const privileges_1 = require("./privileges");
const reserved_role_badge_1 = require("./reserved_role_badge");
class EditRolePage extends react_1.Component {
    constructor(props) {
        super(props);
        this.getFormTitle = () => {
            let titleText;
            const props = {
                tabIndex: 0,
            };
            if (role_1.isReservedRole(this.props.role)) {
                titleText = 'Viewing role';
                props['aria-describedby'] = 'reservedRoleDescription';
            }
            else if (this.editingExistingRole()) {
                titleText = 'Edit role';
            }
            else {
                titleText = 'Create role';
            }
            return (react_1.default.createElement(eui_1.EuiTitle, { size: "l" },
                react_1.default.createElement("h1", Object.assign({}, props),
                    titleText,
                    " ",
                    react_1.default.createElement(reserved_role_badge_1.ReservedRoleBadge, { role: this.props.role }))));
        };
        this.getActionButton = () => {
            if (this.editingExistingRole() && !role_1.isReservedRole(this.props.role)) {
                return (react_1.default.createElement(eui_1.EuiFlexItem, { grow: false },
                    react_1.default.createElement(delete_role_button_1.DeleteRoleButton, { canDelete: true, onDelete: this.handleDeleteRole })));
            }
            return null;
        };
        this.getRoleName = () => {
            return (react_1.default.createElement(eui_1.EuiPanel, null,
                react_1.default.createElement(eui_1.EuiFormRow, Object.assign({ label: 'Role name', helpText: !role_1.isReservedRole(this.props.role) && this.editingExistingRole()
                        ? "A role's name cannot be changed once it has been created."
                        : undefined }, this.validator.validateRoleName(this.state.role)),
                    react_1.default.createElement(eui_1.EuiFieldText, { name: 'name', value: this.state.role.name || '', onChange: this.onNameChange, "data-test-subj": 'roleFormNameInput', readOnly: role_1.isReservedRole(this.props.role) || this.editingExistingRole() }))));
        };
        this.onNameChange = (e) => {
            const rawValue = e.target.value;
            const name = rawValue.replace(/\s/g, '_');
            this.setState({
                role: {
                    ...this.state.role,
                    name,
                },
            });
        };
        this.onRoleChange = (role) => {
            this.setState({
                role,
            });
        };
        this.getKibanaPrivileges = () => {
            return (react_1.default.createElement("div", null,
                react_1.default.createElement(eui_1.EuiSpacer, null),
                react_1.default.createElement(privileges_1.KibanaPrivileges, { kibanaAppPrivileges: this.props.kibanaAppPrivileges, spaces: this.props.spaces, spacesEnabled: this.props.spacesEnabled, userProfile: this.props.userProfile, editable: !role_1.isReservedRole(this.state.role), role: this.state.role, onChange: this.onRoleChange, validator: this.validator })));
        };
        this.getFormButtons = () => {
            if (role_1.isReservedRole(this.props.role)) {
                return react_1.default.createElement(eui_1.EuiButton, { onClick: this.backToRoleList }, "Return to role list");
            }
            const saveText = this.editingExistingRole() ? 'Update role' : 'Create role';
            return (react_1.default.createElement(eui_1.EuiFlexGroup, { responsive: false },
                react_1.default.createElement(eui_1.EuiFlexItem, { grow: false },
                    react_1.default.createElement(eui_1.EuiButton, { "data-test-subj": `roleFormSaveButton`, fill: true, onClick: this.saveRole, disabled: role_1.isReservedRole(this.props.role) }, saveText)),
                react_1.default.createElement(eui_1.EuiFlexItem, { grow: false },
                    react_1.default.createElement(eui_1.EuiButtonEmpty, { "data-test-subj": `roleFormCancelButton`, onClick: this.backToRoleList }, "Cancel")),
                react_1.default.createElement(eui_1.EuiFlexItem, { grow: true }),
                this.getActionButton()));
        };
        this.editingExistingRole = () => {
            return !!this.props.role.name;
        };
        this.isPlaceholderPrivilege = (indexPrivilege) => {
            return indexPrivilege.names.length === 0;
        };
        this.saveRole = () => {
            this.validator.enableValidation();
            const result = this.validator.validateForSave(this.state.role);
            if (result.isInvalid) {
                this.setState({
                    formError: result,
                });
            }
            else {
                this.setState({
                    formError: null,
                });
                const { httpClient } = this.props;
                const role = {
                    ...this.state.role,
                };
                role.elasticsearch.indices = role.elasticsearch.indices.filter(i => !this.isPlaceholderPrivilege(i));
                role.elasticsearch.indices.forEach(index => index.query || delete index.query);
                objects_1.saveRole(httpClient, role)
                    .then(() => {
                    notify_1.toastNotifications.addSuccess('Saved role');
                    this.backToRoleList();
                })
                    .catch((error) => {
                    notify_1.toastNotifications.addDanger(lodash_1.get(error, 'data.message'));
                });
            }
        };
        this.handleDeleteRole = () => {
            const { httpClient, role } = this.props;
            objects_1.deleteRole(httpClient, role.name)
                .then(() => {
                notify_1.toastNotifications.addSuccess('Deleted role');
                this.backToRoleList();
            })
                .catch((error) => {
                notify_1.toastNotifications.addDanger(lodash_1.get(error, 'data.message'));
            });
        };
        this.backToRoleList = () => {
            window.location.hash = management_urls_1.ROLES_PATH;
        };
        this.state = {
            role: props.role,
            formError: null,
        };
        this.validator = new validate_role_1.RoleValidator({ shouldValidate: false });
    }
    render() {
        const description = this.props.spacesEnabled
            ? `Set privileges on your Elasticsearch data and control access to your Kibana spaces.`
            : `Set privileges on your Elasticsearch data and control access to Kibana.`;
        return (react_1.default.createElement(eui_1.EuiPage, { className: "editRolePage", restrictWidth: true },
            react_1.default.createElement(eui_1.EuiPageBody, null,
                react_1.default.createElement(eui_1.EuiForm, Object.assign({}, this.state.formError),
                    this.getFormTitle(),
                    react_1.default.createElement(eui_1.EuiSpacer, null),
                    react_1.default.createElement(eui_1.EuiText, { size: "s" }, description),
                    role_1.isReservedRole(this.props.role) && (react_1.default.createElement(react_1.Fragment, null,
                        react_1.default.createElement(eui_1.EuiSpacer, { size: "s" }),
                        react_1.default.createElement(eui_1.EuiText, { size: "s", color: "subdued" },
                            react_1.default.createElement("p", { id: "reservedRoleDescription", tabIndex: 1 }, "Reserved roles are built-in and cannot be removed or modified.")))),
                    react_1.default.createElement(eui_1.EuiSpacer, null),
                    this.getRoleName(),
                    this.getElasticsearchPrivileges(),
                    this.getKibanaPrivileges(),
                    react_1.default.createElement(eui_1.EuiSpacer, null),
                    this.getFormButtons()))));
    }
    getElasticsearchPrivileges() {
        return (react_1.default.createElement("div", null,
            react_1.default.createElement(eui_1.EuiSpacer, null),
            react_1.default.createElement(privileges_1.ElasticsearchPrivileges, { role: this.state.role, editable: !role_1.isReservedRole(this.state.role), httpClient: this.props.httpClient, onChange: this.onRoleChange, runAsUsers: this.props.runAsUsers, validator: this.validator, indexPatterns: this.props.indexPatterns, allowDocumentLevelSecurity: this.props.allowDocumentLevelSecurity, allowFieldLevelSecurity: this.props.allowFieldLevelSecurity })));
    }
}
exports.EditRolePage = EditRolePage;
