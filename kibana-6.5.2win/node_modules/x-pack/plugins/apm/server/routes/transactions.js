"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const boom_1 = tslib_1.__importDefault(require("boom"));
const joi_1 = tslib_1.__importDefault(require("joi"));
const input_validation_1 = require("../lib/helpers/input_validation");
const setup_request_1 = require("../lib/helpers/setup_request");
// @ts-ignore
const get_timeseries_data_1 = require("../lib/transactions/charts/get_timeseries_data");
const get_distribution_1 = require("../lib/transactions/distribution/get_distribution");
const get_top_transactions_1 = require("../lib/transactions/get_top_transactions");
const get_transaction_1 = require("../lib/transactions/get_transaction");
const get_spans_1 = require("../lib/transactions/spans/get_spans");
const pre = [{ method: setup_request_1.setupRequest, assign: 'setup' }];
const ROOT = '/api/apm/services/{serviceName}/transactions';
const defaultErrorHandler = (reply) => (err) => {
    // tslint:disable-next-line
    console.error(err.stack);
    // @ts-ignore
    reply(boom_1.default.wrap(err, err.statusCode || 400));
};
function initTransactionsApi(server) {
    server.route({
        method: 'GET',
        path: ROOT,
        config: {
            pre,
            validate: {
                query: input_validation_1.withDefaultValidators({
                    transaction_type: joi_1.default.string().default('request'),
                    query: joi_1.default.string()
                })
            }
        },
        handler: (req, reply) => {
            const { serviceName } = req.params;
            const { transaction_type: transactionType } = req.query;
            const { setup } = req.pre;
            return get_top_transactions_1.getTopTransactions({
                serviceName,
                transactionType,
                setup
            })
                .then(reply)
                .catch(defaultErrorHandler(reply));
        }
    });
    server.route({
        method: 'GET',
        path: `${ROOT}/{transactionId}`,
        config: {
            pre,
            validate: {
                query: input_validation_1.withDefaultValidators({
                    traceId: joi_1.default.string().allow('')
                })
            }
        },
        handler: (req, reply) => {
            const { transactionId } = req.params;
            const { traceId } = req.query;
            const { setup } = req.pre;
            return get_transaction_1.getTransaction(transactionId, traceId, setup)
                .then(reply)
                .catch(defaultErrorHandler(reply));
        }
    });
    server.route({
        method: 'GET',
        path: `${ROOT}/{transactionId}/spans`,
        config: {
            pre,
            validate: {
                query: input_validation_1.withDefaultValidators()
            }
        },
        handler: (req, reply) => {
            const { transactionId } = req.params;
            const { setup } = req.pre;
            return get_spans_1.getSpans(transactionId, setup)
                .then(reply)
                .catch(defaultErrorHandler(reply));
        }
    });
    server.route({
        method: 'GET',
        path: `${ROOT}/charts`,
        config: {
            pre,
            validate: {
                query: input_validation_1.withDefaultValidators({
                    transaction_type: joi_1.default.string().default('request'),
                    transaction_name: joi_1.default.string(),
                    query: joi_1.default.string()
                })
            }
        },
        handler: (req, reply) => {
            const { setup } = req.pre;
            const { serviceName } = req.params;
            const transactionType = req.query.transaction_type;
            const transactionName = req.query.transaction_name;
            return get_timeseries_data_1.getTimeseriesData({
                serviceName,
                transactionType,
                transactionName,
                setup
            })
                .then(reply)
                .catch(defaultErrorHandler(reply));
        }
    });
    server.route({
        method: 'GET',
        path: `${ROOT}/distribution`,
        config: {
            pre,
            validate: {
                query: input_validation_1.withDefaultValidators({
                    transaction_name: joi_1.default.string().required()
                })
            }
        },
        handler: (req, reply) => {
            const { setup } = req.pre;
            const { serviceName } = req.params;
            const { transaction_name: transactionName } = req.query;
            return get_distribution_1.getDistribution(serviceName, transactionName, setup)
                .then(reply)
                .catch(defaultErrorHandler(reply));
        }
    });
}
exports.initTransactionsApi = initTransactionsApi;
