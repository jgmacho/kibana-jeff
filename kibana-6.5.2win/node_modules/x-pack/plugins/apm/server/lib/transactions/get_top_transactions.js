"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const constants_1 = require("../../../common/constants");
const transaction_group_query_1 = require("../helpers/transaction_group_query");
async function getTopTransactions({ setup, transactionType, serviceName }) {
    const { start, end, esFilterQuery, client, config } = setup;
    const params = {
        index: config.get('apm_oss.transactionIndices'),
        body: {
            size: 0,
            query: {
                bool: {
                    filter: [
                        { term: { [constants_1.SERVICE_NAME]: serviceName } },
                        { term: { [constants_1.TRANSACTION_TYPE]: transactionType } },
                        { term: { [constants_1.PROCESSOR_EVENT]: 'transaction' } },
                        {
                            range: {
                                '@timestamp': { gte: start, lte: end, format: 'epoch_millis' }
                            }
                        }
                    ]
                }
            },
            aggs: transaction_group_query_1.TRANSACTION_GROUP_AGGREGATES
        }
    };
    if (esFilterQuery) {
        params.body.query.bool.filter.push(esFilterQuery);
    }
    const response = await client('search', params);
    const buckets = lodash_1.get(response, 'aggregations.transactions.buckets', []);
    return transaction_group_query_1.prepareTransactionGroups({ buckets, start, end });
}
exports.getTopTransactions = getTopTransactions;
