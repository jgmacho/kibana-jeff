"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const constants_1 = require("../../../common/constants");
const transaction_group_query_1 = require("../helpers/transaction_group_query");
async function getTopTraces(setup) {
    const { start, end, esFilterQuery, client, config } = setup;
    const params = {
        index: config.get('apm_oss.transactionIndices'),
        body: {
            size: 0,
            query: {
                bool: {
                    must: {
                        // this criterion safeguards against data that lacks a transaction
                        // parent ID but still is not a "trace" by way of not having a
                        // trace ID (e.g. old data before parent ID was implemented, etc)
                        exists: {
                            field: constants_1.TRACE_ID
                        }
                    },
                    must_not: {
                        // no parent ID alongside a trace ID means this transaction is a
                        // "root" transaction, i.e. a trace
                        exists: {
                            field: constants_1.PARENT_ID
                        }
                    },
                    filter: [
                        {
                            range: {
                                '@timestamp': {
                                    gte: start,
                                    lte: end,
                                    format: 'epoch_millis'
                                }
                            }
                        },
                        { term: { [constants_1.PROCESSOR_EVENT]: 'transaction' } }
                    ]
                }
            },
            aggs: transaction_group_query_1.TRANSACTION_GROUP_AGGREGATES
        }
    };
    if (esFilterQuery) {
        params.body.query.bool.filter.push(esFilterQuery);
    }
    const response = await client('search', params);
    const buckets = lodash_1.get(response.aggregations, 'transactions.buckets', []);
    return transaction_group_query_1.prepareTransactionGroups({ buckets, start, end });
}
exports.getTopTraces = getTopTraces;
