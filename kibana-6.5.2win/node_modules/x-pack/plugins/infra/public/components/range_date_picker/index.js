"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
const lodash_1 = require("lodash");
const moment_1 = tslib_1.__importDefault(require("moment"));
const react_1 = tslib_1.__importStar(require("react"));
const eui_1 = require("@elastic/eui");
const commonDates = [
    'Today',
    'Yesterday',
    'This week',
    'Week to date',
    'This month',
    'Month to date',
    'This year',
    'Year to date',
];
class RangeDatePicker extends react_1.default.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            startDate: this.props.startDate,
            endDate: this.props.endDate,
            isPopoverOpen: false,
            recentlyUsed: [],
            quickSelectTime: 1,
            quickSelectUnit: 'hours',
        };
        this.handleChangeStart = (date) => {
            if (date && this.state.startDate !== date) {
                this.props.onChangeRangeTime(date, this.state.endDate, false);
                this.setState({
                    startDate: date,
                });
            }
        };
        this.handleChangeEnd = (date) => {
            if (date && this.state.endDate !== date) {
                this.props.onChangeRangeTime(this.state.startDate, date, false);
                this.setState({
                    endDate: date,
                });
            }
        };
        this.onButtonClick = () => {
            this.setState({
                isPopoverOpen: !this.state.isPopoverOpen,
            });
        };
        this.closePopover = (type, from, to) => {
            const { startDate, endDate, recentlyUsed } = this.managedStartEndDateFromType(type, from, to);
            this.setState({
                ...this.state,
                isPopoverOpen: false,
                startDate,
                endDate,
                recentlyUsed,
            }, () => {
                if (type) {
                    this.props.onChangeRangeTime(startDate, endDate, true);
                }
            });
        };
        this.renderQuickSelect = () => {
            const lastOptions = [
                { value: 'seconds', text: singularize('seconds', this.state.quickSelectTime) },
                { value: 'minutes', text: singularize('minutes', this.state.quickSelectTime) },
                { value: 'hours', text: singularize('hours', this.state.quickSelectTime) },
                { value: 'days', text: singularize('days', this.state.quickSelectTime) },
                { value: 'weeks', text: singularize('weeks', this.state.quickSelectTime) },
                { value: 'months', text: singularize('months', this.state.quickSelectTime) },
                { value: 'years', text: singularize('years', this.state.quickSelectTime) },
            ];
            return (react_1.default.createElement(react_1.Fragment, null,
                react_1.default.createElement(eui_1.EuiTitle, { size: "xxxs" },
                    react_1.default.createElement("span", null, "Quick select")),
                react_1.default.createElement(eui_1.EuiSpacer, { size: "s" }),
                react_1.default.createElement(eui_1.EuiFlexGroup, { gutterSize: "s", responsive: false },
                    react_1.default.createElement(eui_1.EuiFlexItem, null,
                        react_1.default.createElement(eui_1.EuiTitle, { size: "s" },
                            react_1.default.createElement("span", null, "Last"))),
                    react_1.default.createElement(eui_1.EuiFlexItem, null,
                        react_1.default.createElement(eui_1.EuiFormRow, null,
                            react_1.default.createElement(eui_1.EuiFieldNumber, { "aria-label": "Count of", defaultValue: "1", value: this.state.quickSelectTime, step: 0, onChange: arg => {
                                    this.onChange('quickSelectTime', arg);
                                } }))),
                    react_1.default.createElement(eui_1.EuiFlexItem, null,
                        react_1.default.createElement(eui_1.EuiFormRow, null,
                            react_1.default.createElement(eui_1.EuiSelect, { value: this.state.quickSelectUnit, options: lastOptions, onChange: arg => {
                                    this.onChange('quickSelectUnit', arg);
                                } }))),
                    react_1.default.createElement(eui_1.EuiFlexItem, { grow: false },
                        react_1.default.createElement(eui_1.EuiFormRow, null,
                            react_1.default.createElement(eui_1.EuiButton, { onClick: () => this.closePopover('quick-select'), style: { minWidth: 0 } }, "Apply"))))));
        };
        this.onChange = (stateType, args) => {
            let value = args.currentTarget.value;
            if (stateType === 'quickSelectTime' && value !== '') {
                value = parseInt(args.currentTarget.value, 10);
            }
            this.setState({
                ...this.state,
                [stateType]: value,
            });
        };
        this.renderCommonlyUsed = (recentlyCommonDates) => {
            const links = recentlyCommonDates.map(date => {
                return (react_1.default.createElement(eui_1.EuiFlexItem, { key: date },
                    react_1.default.createElement(eui_1.EuiLink, { onClick: () => this.closePopover(date) }, date)));
            });
            return (react_1.default.createElement(react_1.Fragment, null,
                react_1.default.createElement(eui_1.EuiTitle, { size: "xxxs" },
                    react_1.default.createElement("span", null, "Commonly used")),
                react_1.default.createElement(eui_1.EuiSpacer, { size: "s" }),
                react_1.default.createElement(eui_1.EuiText, { size: "s" },
                    react_1.default.createElement(eui_1.EuiFlexGrid, { gutterSize: "s", columns: 2 }, links))));
        };
        this.renderRecentlyUsed = (recentDates) => {
            const links = recentDates.map((date) => {
                let dateRange;
                let dateLink = (react_1.default.createElement(eui_1.EuiLink, { onClick: () => this.closePopover(date.type) }, dateRange || date.text));
                if (typeof date.text !== 'string') {
                    dateRange = `${date.text[0]} â€“ ${date.text[1]}`;
                    dateLink = (react_1.default.createElement(eui_1.EuiLink, { onClick: () => this.closePopover(date.type, date.text[0], date.text[1]) }, dateRange || date.type));
                }
                return (react_1.default.createElement(eui_1.EuiFlexItem, { grow: false, key: `${dateRange || date.type}` }, dateLink));
            });
            return (react_1.default.createElement(react_1.Fragment, null,
                react_1.default.createElement(eui_1.EuiTitle, { size: "xxxs" },
                    react_1.default.createElement("span", null, "Recently used date ranges")),
                react_1.default.createElement(eui_1.EuiSpacer, { size: "s" }),
                react_1.default.createElement(eui_1.EuiText, { size: "s" },
                    react_1.default.createElement(eui_1.EuiFlexGroup, { gutterSize: "s", style: { flexDirection: 'column' } }, links))));
        };
    }
    render() {
        const { isLoading, disabled } = this.props;
        const { startDate, endDate } = this.state;
        const quickSelectButton = (react_1.default.createElement(eui_1.EuiButtonEmpty, { className: "euiFormControlLayout__prepend", style: { borderRight: 'none' }, onClick: this.onButtonClick, disabled: disabled, "aria-label": "Date quick select", size: "xs", iconType: "arrowDown", iconSide: "right" },
            react_1.default.createElement(eui_1.EuiIcon, { type: "calendar" })));
        const commonlyUsed = this.renderCommonlyUsed(commonDates);
        const recentlyUsed = this.renderRecentlyUsed([
            ...this.state.recentlyUsed,
            ...this.props.recentlyUsed,
        ]);
        const quickSelectPopover = (react_1.default.createElement(eui_1.EuiPopover, { id: "QuickSelectPopover", button: quickSelectButton, isOpen: this.state.isPopoverOpen, closePopover: this.closePopover.bind(this), anchorPosition: "downLeft", ownFocus: true },
            react_1.default.createElement("div", { style: { width: '400px' } },
                this.renderQuickSelect(),
                react_1.default.createElement(eui_1.EuiHorizontalRule, null),
                commonlyUsed,
                react_1.default.createElement(eui_1.EuiHorizontalRule, null),
                recentlyUsed)));
        return (react_1.default.createElement(eui_1.EuiFormControlLayout, { prepend: quickSelectPopover },
            react_1.default.createElement(eui_1.EuiDatePickerRange, { className: "euiDatePickerRange--inGroup", iconType: false, disabled: disabled, fullWidth: true, startDateControl: react_1.default.createElement(eui_1.EuiDatePicker, { dateFormat: "L LTS", selected: startDate, onChange: this.handleChangeStart, isInvalid: startDate && endDate ? startDate > endDate : false, fullWidth: true, "aria-label": "Start date", disabled: disabled, shouldCloseOnSelect: true, showTimeSelect: true }), endDateControl: react_1.default.createElement(eui_1.EuiDatePicker, { dateFormat: "L LTS", selected: endDate, onChange: this.handleChangeEnd, isInvalid: startDate && endDate ? startDate > endDate : false, fullWidth: true, disabled: disabled, isLoading: isLoading, "aria-label": "End date", shouldCloseOnSelect: true, showTimeSelect: true, popperPlacement: "top-end" }) })));
    }
    resetRangeDate(startDate, endDate) {
        this.setState({
            ...this.state,
            startDate,
            endDate,
        });
    }
    managedStartEndDateFromType(type, from, to) {
        let { startDate, endDate } = this.state;
        let recentlyUsed = this.state.recentlyUsed;
        let textJustUsed = type;
        if (type === 'quick-select') {
            textJustUsed = `Last ${this.state.quickSelectTime} ${singularize(this.state.quickSelectUnit, this.state.quickSelectTime)}`;
            startDate = moment_1.default().subtract(this.state.quickSelectTime, this.state
                .quickSelectUnit);
            endDate = moment_1.default();
        }
        else if (type === 'Today') {
            startDate = moment_1.default().startOf('day');
            endDate = moment_1.default()
                .startOf('day')
                .add(24, 'hour');
        }
        else if (type === 'Yesterday') {
            startDate = moment_1.default()
                .subtract(1, 'day')
                .startOf('day');
            endDate = moment_1.default()
                .subtract(1, 'day')
                .startOf('day')
                .add(24, 'hour');
        }
        else if (type === 'This week') {
            startDate = moment_1.default().startOf('week');
            endDate = moment_1.default()
                .startOf('week')
                .add(1, 'week');
        }
        else if (type === 'Week to date') {
            startDate = moment_1.default().subtract(1, 'week');
            endDate = moment_1.default();
        }
        else if (type === 'This month') {
            startDate = moment_1.default().startOf('month');
            endDate = moment_1.default()
                .startOf('month')
                .add(1, 'month');
        }
        else if (type === 'Month to date') {
            startDate = moment_1.default().subtract(1, 'month');
            endDate = moment_1.default();
        }
        else if (type === 'This year') {
            startDate = moment_1.default().startOf('year');
            endDate = moment_1.default()
                .startOf('year')
                .add(1, 'year');
        }
        else if (type === 'Year to date') {
            startDate = moment_1.default().subtract(1, 'year');
            endDate = moment_1.default();
        }
        else if (type === 'date-range' && to && from) {
            startDate = moment_1.default(from);
            endDate = moment_1.default(to);
        }
        if (textJustUsed !== undefined && !lodash_1.find(recentlyUsed, ['text', textJustUsed])) {
            recentlyUsed.unshift({ type, text: textJustUsed });
            recentlyUsed = recentlyUsed.slice(0, 5);
        }
        return {
            startDate,
            endDate,
            recentlyUsed,
        };
    }
}
exports.RangeDatePicker = RangeDatePicker;
const singularize = (str, qty) => (qty === 1 ? str.slice(0, -1) : str);
