"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eui_1 = require("@elastic/eui");
const react_1 = tslib_1.__importDefault(require("react"));
const loading_1 = require("../loading");
const section_1 = require("./section");
class Metrics extends react_1.default.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            crosshairValue: null,
        };
        this.renderLayout = (layout) => {
            return (react_1.default.createElement(react_1.default.Fragment, { key: layout.id },
                react_1.default.createElement(eui_1.EuiPageContentBody, null,
                    react_1.default.createElement(eui_1.EuiTitle, { size: "m" },
                        react_1.default.createElement("h2", { id: layout.id }, `${layout.label} Overview`))),
                layout.sections.map(this.renderSection(layout))));
        };
        this.renderSection = (layout) => (section) => {
            let sectionProps = {};
            if (section.type === 'chart') {
                const { onChangeRangeTime } = this.props;
                sectionProps = {
                    onChangeRangeTime,
                    crosshairValue: this.state.crosshairValue,
                    onCrosshairUpdate: this.onCrosshairUpdate,
                };
            }
            return (react_1.default.createElement(section_1.Section, Object.assign({ section: section, metrics: this.props.metrics, key: `${layout.id}-${section.id}` }, sectionProps)));
        };
        this.onCrosshairUpdate = (crosshairValue) => {
            this.setState({
                crosshairValue,
            });
        };
    }
    render() {
        if (this.props.loading) {
            return (react_1.default.createElement(loading_1.InfraLoadingPanel, { height: "100vh", width: "auto", text: `Loading data for ${this.props.nodeName}` }));
        }
        return react_1.default.createElement(react_1.default.Fragment, null, this.props.layouts.map(this.renderLayout));
    }
}
exports.Metrics = Metrics;
