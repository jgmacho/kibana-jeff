"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eui_1 = require("@elastic/eui");
const react_1 = tslib_1.__importDefault(require("react"));
const link_to_1 = require("../../pages/link_to");
exports.NodeContextMenu = ({ options, children, node, isPopoverOpen, closePopover, nodeType, }) => {
    const nodeLogsUrl = getNodeLogsUrl(nodeType, node);
    const nodeDetailUrl = getNodeDetailUrl(nodeType, node);
    const panels = [
        {
            id: 0,
            title: '',
            items: [
                ...(nodeLogsUrl
                    ? [
                        {
                            name: `View logs`,
                            href: nodeLogsUrl,
                        },
                    ]
                    : []),
                ...(nodeDetailUrl
                    ? [
                        {
                            name: `View metrics`,
                            href: nodeDetailUrl,
                        },
                    ]
                    : []),
            ],
        },
    ];
    return (react_1.default.createElement(eui_1.EuiPopover, { closePopover: closePopover, id: `${node.id}-popover`, isOpen: isPopoverOpen, button: children, panelPaddingSize: "none" },
        react_1.default.createElement(eui_1.EuiContextMenu, { initialPanelId: 0, panels: panels })));
};
const getNodeLogsUrl = (nodeType, { path }) => {
    if (path.length <= 0) {
        return undefined;
    }
    const lastPathSegment = path[path.length - 1];
    switch (nodeType) {
        case 'host':
            return link_to_1.getHostLogsUrl({ hostname: lastPathSegment.value });
        case 'container':
            return link_to_1.getContainerLogsUrl({ containerId: lastPathSegment.value });
        case 'pod':
            return link_to_1.getPodLogsUrl({ podId: lastPathSegment.value });
        default:
            return undefined;
    }
};
const getNodeDetailUrl = (nodeType, { path }) => {
    if (path.length <= 0) {
        return undefined;
    }
    const lastPathSegment = path[path.length - 1];
    switch (nodeType) {
        case 'host':
            return link_to_1.getHostDetailUrl({ name: lastPathSegment.value });
        case 'container':
            return link_to_1.getContainerDetailUrl({ name: lastPathSegment.value });
        case 'pod':
            return link_to_1.getPodDetailUrl({ name: lastPathSegment.value });
        default:
            return undefined;
    }
};
