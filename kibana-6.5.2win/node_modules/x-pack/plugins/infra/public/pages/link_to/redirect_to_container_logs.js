"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const compose_1 = tslib_1.__importDefault(require("lodash/fp/compose"));
const react_1 = tslib_1.__importDefault(require("react"));
const react_router_dom_1 = require("react-router-dom");
const loading_page_1 = require("../../components/loading_page");
const with_log_filter_1 = require("../../containers/logs/with_log_filter");
const with_log_position_1 = require("../../containers/logs/with_log_position");
const with_source_1 = require("../../containers/with_source");
const query_params_1 = require("./query_params");
exports.RedirectToContainerLogs = ({ match, location, }) => (react_1.default.createElement(with_source_1.WithSource, null, ({ configuredFields }) => {
    if (!configuredFields) {
        return react_1.default.createElement(loading_page_1.LoadingPage, { message: "Loading container logs" });
    }
    const searchString = compose_1.default(with_log_filter_1.replaceLogFilterInQueryString(`${configuredFields.container}: ${match.params.containerId}`), with_log_position_1.replaceLogPositionInQueryString(query_params_1.getTimeFromLocation(location)))('');
    return react_1.default.createElement(react_router_dom_1.Redirect, { to: `/logs?${searchString}` });
}));
exports.getContainerLogsUrl = ({ containerId, time, }) => ['#/link-to/container-logs/', containerId, ...(time ? [`?time=${time}`] : [])].join('');
