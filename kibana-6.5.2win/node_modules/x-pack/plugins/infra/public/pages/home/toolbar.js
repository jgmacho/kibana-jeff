"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eui_1 = require("@elastic/eui");
const react_1 = tslib_1.__importDefault(require("react"));
const autocomplete_field_1 = require("../../components/autocomplete_field");
const toolbar_1 = require("../../components/eui/toolbar");
const waffle_time_controls_1 = require("../../components/waffle/waffle_time_controls");
const types_1 = require("../../../common/graphql/types");
const waffle_group_by_controls_1 = require("../../components/waffle/waffle_group_by_controls");
const waffle_metric_controls_1 = require("../../components/waffle/waffle_metric_controls");
const waffle_node_type_switcher_1 = require("../../components/waffle/waffle_node_type_switcher");
const with_waffle_filters_1 = require("../../containers/waffle/with_waffle_filters");
const with_waffle_options_1 = require("../../containers/waffle/with_waffle_options");
const with_waffle_time_1 = require("../../containers/waffle/with_waffle_time");
const with_kuery_autocompletion_1 = require("../../containers/with_kuery_autocompletion");
const TITLES = {
    [types_1.InfraNodeType.host]: 'Hosts',
    [types_1.InfraNodeType.pod]: 'Kubernetes Pods',
    [types_1.InfraNodeType.container]: 'Docker Containers',
};
exports.HomeToolbar = () => (react_1.default.createElement(toolbar_1.Toolbar, null,
    react_1.default.createElement(eui_1.EuiFlexGroup, { alignItems: "center" },
        react_1.default.createElement(eui_1.EuiFlexItem, null,
            react_1.default.createElement(with_waffle_options_1.WithWaffleOptions, null, ({ nodeType }) => (react_1.default.createElement(eui_1.EuiTitle, { size: "m" },
                react_1.default.createElement("h1", null, TITLES[nodeType])))),
            react_1.default.createElement(eui_1.EuiText, { color: "subdued" },
                react_1.default.createElement("p", null, "Showing the last 1 minute of data from the time period"))),
        react_1.default.createElement(with_waffle_options_1.WithWaffleOptions, null, ({ nodeType, changeNodeType, changeGroupBy, changeMetric }) => (react_1.default.createElement(eui_1.EuiFlexItem, { grow: false },
            react_1.default.createElement(waffle_node_type_switcher_1.WaffleNodeTypeSwitcher, { nodeType: nodeType, changeNodeType: changeNodeType, changeMetric: changeMetric, changeGroupBy: changeGroupBy }))))),
    react_1.default.createElement(eui_1.EuiFlexGroup, { alignItems: "center", justifyContent: "spaceBetween", gutterSize: "m" },
        react_1.default.createElement(eui_1.EuiFlexItem, null,
            react_1.default.createElement(with_kuery_autocompletion_1.WithKueryAutocompletion, null, ({ isLoadingSuggestions, loadSuggestions, suggestions }) => (react_1.default.createElement(with_waffle_filters_1.WithWaffleFilter, null, ({ applyFilterQueryFromKueryExpression, filterQueryDraft, isFilterQueryDraftValid, setFilterQueryDraftFromKueryExpression, }) => (react_1.default.createElement(autocomplete_field_1.AutocompleteField, { isLoadingSuggestions: isLoadingSuggestions, isValid: isFilterQueryDraftValid, loadSuggestions: loadSuggestions, onChange: setFilterQueryDraftFromKueryExpression, onSubmit: applyFilterQueryFromKueryExpression, placeholder: "Search for infrastructure data... (e.g. host.name:host-1)", suggestions: suggestions, value: filterQueryDraft ? filterQueryDraft.expression : '' })))))),
        react_1.default.createElement(with_waffle_options_1.WithWaffleOptions, null, ({ changeMetric, changeGroupBy, groupBy, metric, nodeType }) => (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(eui_1.EuiFlexItem, { grow: false },
                react_1.default.createElement(waffle_metric_controls_1.WaffleMetricControls, { metric: metric, nodeType: nodeType, onChange: changeMetric })),
            react_1.default.createElement(eui_1.EuiFlexItem, { grow: false },
                react_1.default.createElement(waffle_group_by_controls_1.WaffleGroupByControls, { groupBy: groupBy, nodeType: nodeType, onChange: changeGroupBy }))))),
        react_1.default.createElement(eui_1.EuiFlexItem, { grow: false },
            react_1.default.createElement(with_waffle_time_1.WithWaffleTime, { resetOnUnmount: true }, ({ currentTime, isAutoReloading, jumpToTime, startAutoReload, stopAutoReload }) => (react_1.default.createElement(waffle_time_controls_1.WaffleTimeControls, { currentTime: currentTime, isLiveStreaming: isAutoReloading, onChangeTime: jumpToTime, startLiveStreaming: startAutoReload, stopLiveStreaming: stopAutoReload })))))));
