"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
const react_1 = tslib_1.__importDefault(require("react"));
const eui_1 = require("@elastic/eui");
const styled_components_1 = tslib_1.__importStar(require("styled-components"));
const auto_sizer_1 = require("../../components/auto_sizer");
const beta_badge_header_section_1 = require("../../components/beta_badge_header_section");
const header_1 = require("../../components/header");
const metrics_1 = require("../../components/metrics");
const time_controls_1 = require("../../components/metrics/time_controls");
const page_1 = require("../../components/page");
const with_capabilites_1 = require("../../containers/capabilities/with_capabilites");
const with_metrics_1 = require("../../containers/metrics/with_metrics");
const with_metrics_time_1 = require("../../containers/metrics/with_metrics_time");
const with_options_1 = require("../../containers/with_options");
const error_1 = require("../error");
const layouts_1 = require("./layouts");
const DetailPageContent = styled_components_1.default(page_1.PageContent) `
  overflow: auto;
  background-color: ${props => props.theme.eui.euiColorLightestShade};
`;
const EuiPageContentWithRelative = styled_components_1.default(eui_1.EuiPageContent) `
  position: relative;
`;
class MetricDetailPage extends react_1.default.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            isSideNavOpenOnMobile: false,
        };
        this.handleClick = (section) => () => {
            const id = section.linkToId || section.id;
            const el = document.getElementById(id);
            if (el) {
                el.scrollIntoView();
            }
        };
        this.toggleOpenOnMobile = () => {
            this.setState({
                isSideNavOpenOnMobile: !this.state.isSideNavOpenOnMobile,
            });
        };
    }
    render() {
        const nodeName = this.props.match.params.node;
        const nodeType = this.props.match.params.type;
        const layoutCreator = layouts_1.layoutCreators[nodeType];
        if (!layoutCreator) {
            return react_1.default.createElement(error_1.Error, { message: `"${nodeType}" is not a valid node type` });
        }
        const layouts = layoutCreator(this.props.theme);
        const breadcrumbs = [{ text: nodeName }];
        return (react_1.default.createElement(page_1.ColumnarPage, null,
            react_1.default.createElement(header_1.Header, { appendSections: react_1.default.createElement(beta_badge_header_section_1.InfrastructureBetaBadgeHeaderSection, null), breadcrumbs: breadcrumbs }),
            react_1.default.createElement(with_metrics_time_1.WithMetricsTimeUrlState, null),
            react_1.default.createElement(DetailPageContent, null,
                react_1.default.createElement(with_options_1.WithOptions, null, ({ sourceId }) => (react_1.default.createElement(with_metrics_time_1.WithMetricsTime, { resetOnUnmount: true }, ({ currentTimeRange, isAutoReloading, setRangeTime, startMetricsAutoReload, stopMetricsAutoReload, }) => (react_1.default.createElement(with_capabilites_1.WithCapabilities, { layouts: layouts, sourceId: sourceId, nodeType: nodeType, nodeId: nodeName }, ({ filteredLayouts }) => {
                    return (react_1.default.createElement(with_metrics_1.WithMetrics, { layouts: filteredLayouts, sourceId: sourceId, timerange: currentTimeRange, nodeType: nodeType, nodeId: nodeName }, ({ metrics, error, loading }) => {
                        if (error) {
                            return react_1.default.createElement(error_1.ErrorPageBody, { message: error });
                        }
                        const sideNav = filteredLayouts.map(item => {
                            return {
                                name: item.label,
                                id: item.id,
                                items: item.sections.map(section => ({
                                    id: section.id,
                                    name: section.label,
                                    onClick: this.handleClick(section),
                                })),
                            };
                        });
                        return (react_1.default.createElement(eui_1.EuiPage, { style: { flex: '1 0 auto' } },
                            react_1.default.createElement(eui_1.EuiPageSideBar, null,
                                react_1.default.createElement(eui_1.EuiHideFor, { sizes: ['xs', 's'] },
                                    react_1.default.createElement(EuiSideNavContainer, null,
                                        react_1.default.createElement(eui_1.EuiSideNav, { items: sideNav }))),
                                react_1.default.createElement(eui_1.EuiShowFor, { sizes: ['xs', 's'] },
                                    react_1.default.createElement(eui_1.EuiSideNav, { items: sideNav, mobileTitle: nodeName, toggleOpenOnMobile: this.toggleOpenOnMobile, isOpenOnMobile: this.state.isSideNavOpenOnMobile }))),
                            react_1.default.createElement(auto_sizer_1.AutoSizer, { content: false, bounds: true, detectAnyWindowResize: true }, ({ measureRef, bounds: { width = 0 } }) => {
                                return (react_1.default.createElement(MetricsDetailsPageColumn, { innerRef: measureRef },
                                    react_1.default.createElement(eui_1.EuiPageBody, { style: { width: `${width}px` } },
                                        react_1.default.createElement(eui_1.EuiPageHeader, { style: { flex: '0 0 auto' } },
                                            react_1.default.createElement(eui_1.EuiPageHeaderSection, { style: { width: '100%' } },
                                                react_1.default.createElement(MetricsTitleTimeRangeContainer, null,
                                                    react_1.default.createElement(eui_1.EuiHideFor, { sizes: ['xs', 's'] },
                                                        react_1.default.createElement(eui_1.EuiTitle, { size: "m" },
                                                            react_1.default.createElement("h1", null, nodeName))),
                                                    react_1.default.createElement(time_controls_1.MetricsTimeControls, { currentTimeRange: currentTimeRange, isLiveStreaming: isAutoReloading, onChangeRangeTime: setRangeTime, startLiveStreaming: startMetricsAutoReload, stopLiveStreaming: stopMetricsAutoReload })))),
                                        react_1.default.createElement(EuiPageContentWithRelative, null,
                                            react_1.default.createElement(metrics_1.Metrics, { nodeName: nodeName, layouts: filteredLayouts, metrics: metrics, loading: metrics.length > 0 && isAutoReloading
                                                    ? false
                                                    : loading, onChangeRangeTime: setRangeTime })))));
                            })));
                    }));
                }))))))));
    }
}
exports.MetricDetail = styled_components_1.withTheme(MetricDetailPage);
const EuiSideNavContainer = styled_components_1.default.div `
  position: fixed;
  z-index: 1;
  height: 88vh;
  background-color: #f5f5f5;
  padding-left: 16px;
  margin-left: -16px;
  overflow-y: auto;
  overflow-x: hidden;
`;
const MetricsDetailsPageColumn = styled_components_1.default.div `
  flex: 1 0 0%;
  display: flex;
  flex-direction: column;
`;
const MetricsTitleTimeRangeContainer = styled_components_1.default.div `
  display: flex;
  flex-flow: row wrap;
  justify-content: space-between;
`;
