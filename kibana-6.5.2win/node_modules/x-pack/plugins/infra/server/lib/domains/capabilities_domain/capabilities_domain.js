"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
class InfraCapabilitiesDomain {
    constructor(adapter, libs) {
        this.adapter = adapter;
        this.libs = libs;
    }
    async getCapabilities(req, sourceId, nodeName, nodeType) {
        const sourceConfiguration = await this.libs.sources.getConfiguration(sourceId);
        const metricsPromise = this.adapter.getMetricCapabilities(req, sourceConfiguration, nodeName, nodeType);
        const logsPromise = this.adapter.getLogCapabilities(req, sourceConfiguration, nodeName, nodeType);
        const metrics = await metricsPromise;
        const logs = await logsPromise;
        const metricCapabilities = pickCapabilities(metrics).map(metricCapability => {
            return { name: metricCapability, source: 'metrics' };
        });
        const logCapabilities = pickCapabilities(logs).map(logCapability => {
            return { name: logCapability, source: 'logs' };
        });
        return metricCapabilities.concat(logCapabilities);
    }
}
exports.InfraCapabilitiesDomain = InfraCapabilitiesDomain;
const pickCapabilities = (buckets) => {
    if (buckets) {
        const capabilities = buckets
            .map(module => {
            if (module.names) {
                return module.names.buckets.map(name => {
                    return `${module.key}.${name.key}`;
                });
            }
            else {
                return [];
            }
        })
            .reduce((a, b) => a.concat(b), []);
        return capabilities;
    }
    else {
        return [];
    }
};
