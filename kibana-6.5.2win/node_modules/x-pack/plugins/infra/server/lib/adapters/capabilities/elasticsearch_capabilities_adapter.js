"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
class ElasticsearchCapabilitiesAdapter {
    constructor(framework) {
        this.framework = framework;
    }
    async getMetricCapabilities(req, sourceConfiguration, nodeName, nodeType) {
        const idFieldName = getIdFieldName(sourceConfiguration, nodeType);
        const metricQuery = {
            index: sourceConfiguration.metricAlias,
            body: {
                query: {
                    bool: {
                        filter: {
                            term: { [idFieldName]: nodeName },
                        },
                    },
                },
                size: 0,
                aggs: {
                    metrics: {
                        terms: {
                            field: 'metricset.module',
                            size: 1000,
                        },
                        aggs: {
                            names: {
                                terms: {
                                    field: 'metricset.name',
                                    size: 1000,
                                },
                            },
                        },
                    },
                },
            },
        };
        const response = await this.framework.callWithRequest(req, 'search', metricQuery);
        return response.aggregations && response.aggregations.metrics
            ? response.aggregations.metrics.buckets
            : [];
    }
    async getLogCapabilities(req, sourceConfiguration, nodeName, nodeType) {
        const idFieldName = getIdFieldName(sourceConfiguration, nodeType);
        const logQuery = {
            index: sourceConfiguration.logAlias,
            body: {
                query: {
                    bool: {
                        filter: {
                            term: { [idFieldName]: nodeName },
                        },
                    },
                },
                size: 0,
                aggs: {
                    metrics: {
                        terms: {
                            field: 'fileset.module',
                            size: 1000,
                        },
                        aggs: {
                            names: {
                                terms: {
                                    field: 'fileset.name',
                                    size: 1000,
                                },
                            },
                        },
                    },
                },
            },
        };
        const response = await this.framework.callWithRequest(req, 'search', logQuery);
        return response.aggregations && response.aggregations.metrics
            ? response.aggregations.metrics.buckets
            : [];
    }
}
exports.ElasticsearchCapabilitiesAdapter = ElasticsearchCapabilitiesAdapter;
const getIdFieldName = (sourceConfiguration, nodeType) => {
    switch (nodeType) {
        case 'host':
            return sourceConfiguration.fields.host;
        case 'container':
            return sourceConfiguration.fields.container;
        default:
            return sourceConfiguration.fields.pod;
    }
};
