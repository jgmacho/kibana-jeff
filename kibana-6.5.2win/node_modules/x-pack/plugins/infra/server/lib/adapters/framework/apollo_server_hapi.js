"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const GraphiQL = tslib_1.__importStar(require("apollo-server-module-graphiql"));
const boom_1 = tslib_1.__importDefault(require("boom"));
const apollo_server_core_1 = require("apollo-server-core");
exports.graphqlHapi = Object.assign((server, options, next) => {
    if (!options || !options.graphqlOptions) {
        throw new Error('Apollo Server requires options.');
    }
    server.route({
        config: options.route || {},
        handler: async (request, reply) => {
            try {
                const gqlResponse = await apollo_server_core_1.runHttpQuery([request], {
                    method: request.method.toUpperCase(),
                    options: options.graphqlOptions,
                    query: request.method === 'post' ? request.payload : request.query,
                });
                return reply(gqlResponse).type('application/json');
            }
            catch (error) {
                if ('HttpQueryError' !== error.name) {
                    const queryError = boom_1.default.wrap(error);
                    queryError.output.payload.message = error.message;
                    return reply(queryError);
                }
                if (error.isGraphQLError === true) {
                    return reply(error.message)
                        .code(error.statusCode)
                        .type('application/json');
                }
                const genericError = boom_1.default.create(error.statusCode, error.message);
                if (error.headers) {
                    Object.keys(error.headers).forEach(header => {
                        genericError.output.headers[header] = error.headers[header];
                    });
                }
                // Boom hides the error when status code is 500
                genericError.output.payload.message = error.message;
                throw genericError;
            }
        },
        method: ['GET', 'POST'],
        path: options.path || '/graphql',
        vhost: options.vhost || undefined,
    });
    return next();
}, {
    attributes: {
        name: 'graphql',
    },
});
exports.graphiqlHapi = Object.assign((server, options) => {
    if (!options || !options.graphiqlOptions) {
        throw new Error('Apollo Server GraphiQL requires options.');
    }
    server.route({
        config: options.route || {},
        handler: async (request, reply) => {
            const graphiqlString = await GraphiQL.resolveGraphiQLString(request.query, options.graphiqlOptions, request);
            return reply(graphiqlString).type('text/html');
        },
        method: 'GET',
        path: options.path || '/graphiql',
    });
}, {
    attributes: {
        name: 'graphiql',
    },
});
