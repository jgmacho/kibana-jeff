import "core-js/modules/es6.object.assign";
import "core-js/modules/web.dom.iterable";
import "core-js/modules/es6.array.iterator";
import "core-js/modules/es6.object.keys";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { EuiLink } from '../link';

var limitBreadcrumbs = function limitBreadcrumbs(breadcrumbs, max) {
  var breadcrumbsAtStart = [];
  var breadcrumbsAtEnd = [];
  var limit = Math.min(max, breadcrumbs.length);

  for (var i = 0; i < limit; i++) {
    // We'll alternate with displaying breadcrumbs at the end and at the start, but be biased
    // towards breadcrumbs the end so that if max is an odd number, we'll have one more
    // breadcrumb visible at the end than at the beginning.
    var isEven = i % 2 === 0; // We're picking breadcrumbs from the front AND the back, so we treat each iteration as a
    // half-iteration.

    var normalizedIndex = Math.floor(i * 0.5);
    var indexOfBreadcrumb = isEven ? breadcrumbs.length - 1 - normalizedIndex : normalizedIndex;
    var breadcrumb = breadcrumbs[indexOfBreadcrumb];

    if (isEven) {
      breadcrumbsAtEnd.unshift(breadcrumb);
    } else {
      breadcrumbsAtStart.push(breadcrumb);
    }
  }

  if (max < breadcrumbs.length) {
    breadcrumbsAtStart.push(React.createElement(EuiBreadcrumbCollapsed, {
      key: "collapsed"
    }));
  }

  return breadcrumbsAtStart.concat(breadcrumbsAtEnd);
};

var EuiBreadcrumbCollapsed = function EuiBreadcrumbCollapsed() {
  return React.createElement(Fragment, null, React.createElement("div", {
    className: "euiBreadcrumb euiBreadcrumb--collapsed"
  }, "\u2026"), React.createElement(EuiBreadcrumbSeparator, null));
};

var EuiBreadcrumbSeparator = function EuiBreadcrumbSeparator() {
  return React.createElement("div", {
    className: "euiBreadcrumbSeparator"
  });
};

export var EuiBreadcrumbs = function EuiBreadcrumbs(_ref) {
  var breadcrumbs = _ref.breadcrumbs,
      className = _ref.className,
      responsive = _ref.responsive,
      truncate = _ref.truncate,
      max = _ref.max,
      rest = _objectWithoutProperties(_ref, ["breadcrumbs", "className", "responsive", "truncate", "max"]);

  var breadcrumbElements = breadcrumbs.map(function (breadcrumb, index) {
    var text = breadcrumb.text,
        href = breadcrumb.href,
        onClick = breadcrumb.onClick,
        breadcrumbClassName = breadcrumb.className,
        breadcrumbRest = _objectWithoutProperties(breadcrumb, ["text", "href", "onClick", "className"]);

    var isLastBreadcrumb = index === breadcrumbs.length - 1;
    var breadcrumbClasses = classNames('euiBreadcrumb', breadcrumbClassName, {
      'euiBreadcrumb--last': isLastBreadcrumb
    });
    var link;

    if (isLastBreadcrumb) {
      link = React.createElement("span", _extends({
        className: breadcrumbClasses,
        title: truncate ? text : undefined,
        "aria-current": "page"
      }, breadcrumbRest), text);
    } else {
      link = React.createElement(EuiLink, _extends({
        color: "subdued",
        href: href,
        onClick: onClick,
        className: breadcrumbClasses,
        title: truncate ? text : undefined
      }, breadcrumbRest), text);
    }

    var separator;

    if (!isLastBreadcrumb) {
      separator = React.createElement(EuiBreadcrumbSeparator, null);
    }

    return React.createElement(Fragment, {
      key: index
    }, link, separator);
  });
  var limitedBreadcrumbs = max ? limitBreadcrumbs(breadcrumbElements, max) : breadcrumbElements;
  var classes = classNames('euiBreadcrumbs', className, {
    'euiBreadcrumbs--truncate': truncate,
    'euiBreadcrumbs--responsive': responsive
  });
  return React.createElement("nav", _extends({
    "aria-label": "breadcrumb",
    className: classes
  }, rest), limitedBreadcrumbs);
};
EuiBreadcrumbs.propTypes = {
  className: PropTypes.string,
  responsive: PropTypes.bool,
  truncate: PropTypes.bool,
  max: PropTypes.number,
  breadcrumbs: PropTypes.arrayOf(PropTypes.shape({
    text: PropTypes.node.isRequired,
    href: PropTypes.string,
    onClick: PropTypes.func
  })).isRequired
};
EuiBreadcrumbs.defaultProps = {
  responsive: true,
  truncate: true,
  max: 5
};
EuiBreadcrumbs.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiBreadcrumbs",
  "props": {
    "responsive": {
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "truncate": {
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "max": {
      "defaultValue": {
        "value": "5",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "breadcrumbs": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "text": {
              "name": "node",
              "required": true
            },
            "href": {
              "name": "string",
              "required": false
            },
            "onClick": {
              "name": "func",
              "required": false
            }
          }
        }
      },
      "required": true,
      "description": ""
    }
  }
};